 
'''
using discord.py version 1.0.0a
'''
import discord
import asyncio
import re
import multiprocessing
import threading
import concurrent
import datetime


BOT_OWNER_ROLE = 'Runner' # change to what you need
#BOT_OWNER_ROLE_ID = "544387608378343446"
  
 
g="https://cdn.dribbble.com/users/261568/screenshots/1471402/chrome.gif"
 
oot_channel_id_list = ["709105854473044049",  #galaxy
"709105854473044049", #glxy
"714790953725984829", #alen
"706883574036693064", #nation
"707120277196242995", #pride
"712859053994278962", #egle
"459842150323060736", #td
"708146834752929813", #addicted 
"693960182803333150"  #world
,"459842150323060736","708146834752929813",
"459842150323060736",
"726974785250263113","722080589997539368",
"708933852365586472","721373604247371797","721890235444887573","721374456701911170",
"709105854473044049","721374335146917898","722408230873202788","721374498758328321",
"708933760695009321","727152893160980480",
"725143647032705095 ","698434631636090950",
"726257532494020659 ","723526231471161445",
"727115891204030576","712203364284498041",
"725010542254620683","691011674181992518",
"725144221484580904","708146834752929813",
"459842150323060736","719862214370263120",
"726974785250263113",
"693960182803333150","722080589997539368",
"708933852365586472","721373604247371797","721890235444887573","721374456701911170",
"709105854473044049","721374335146917898","722408230873202788","721374498758328321",
"708933760695009321","727152893160980480",
"725143647032705095 ","698434631636090950",
"726257532494020659 ","723526231471161445",
"727115891204030576","712203364284498041",
"725010542254620683","691011674181992518",
"725144221484580904","708146834752929813",
"459842150323060736","719862214370263120",
"726974785250263113",
"693960182803333150",
"689311945345859795",
"727115801496125441 ",
"714446952586280992 ",
"708933957269454868",
"721373604247371797",
"721373676553109524",
"721890235444887573",
"721374335146917898", "722080589997539368",
"708933852365586472","723088743493533727",
"723088839740227614","723877595560804372",
"723087879852785684","722080589997539368",
"709105854473044049",
"708933760695009321","722417080485412955",
"708933957269454868","721373604247371797",
"721373604247371797",
"721373676553109524",
"721890235444887573",
"721374335146917898",
"721374456701911170",
"722046175699796058",
"721374498758328321",
"459842150323060736",
"691011674181992518" ,
    "721374335146917898","708933760695009321" #swagiq ,
    #pride
    "708933760695009321","708933760695009321","708933760695009321","723088743493533727",
"723087879852785684",
"723088839740227614" ,"723088743493533727",
"723088839740227614",
"723087879852785684",
"723087776488226867",
"723087669873344522",
"723087621919604797","722080589997539368",
"708933852365586472","723088743493533727",
"723088839740227614","723877595560804372",
"723087879852785684","722080589997539368",
"709105854473044049",
"708933760695009321","722417080485412955",
"708933957269454868","721373604247371797",
"721373604247371797",
"721373676553109524",
"721890235444887573",
"721374335146917898",
"721374456701911170",
"722046175699796058",
"721374498758328321",
"459842150323060736","724601176292720710",
"724601624806424676",
"724426470390497280",
"724601333952544868",
"724601425706876928",
"724581276396552282",
"724601176292720710",
"724558929677385840",
"724581276396552282",
"722705945532039199",
"722706935580983386",
"711965357975535657",
"708674145340227634",
"708933957269454868",
"691011674181992518",
"722417157811601516", "709105854473044049" , "708939482405273650", "708939395323133972", "708933852365586472", "713398517544255599" ,"709683027009339424","714065739954520084",	"595639586726740049"	,"591068955523809328"	,"580198028950896640","459842150323060736","513818250652680213" ,"569420198717816852","568617830258442255",
    "718825437710516304", "718040375230595113","708146834752929813","713349059259400243","459842150323060736","716868759490527314","691011674181992518","693960182803333150","689311945345859795","695776240199794739","695775976327610498","714446952586280992","698434631636090950","717932695744937984","717924977692901436","718193072923476018","716868750376435724","718289931767775253","710823260773810286","709105854473044049","705421948171190343","707120277196242995","459842150323060736","516800236941869076","718681472936181792","700663849875144816","700663991671717939","700664433793302578","700664863525175346","700664827323875398", "694528602586480722", "694528602586480722", "694528602586480722", "681891490208677958", "693960182803333150", "693960182803333150", "693960182803333150", "568617830258442255", "568617830258442255", "570794448808837131", "570794448808837131", "689311945345859795", "689311945345859795", "689311945345859795", "694084730022264852", "694084730022264852", "686419613898113092", "686419613898113092","714063807722422333","708933852365586472","711043327960678453","708933957269454868","712373748287930388","708939482405273650","713398517544255599","720993786511228928","721353316264706100" ,"708933852365586472","721354709562294382" ,"721347821403635713","721354761441509457","709105854473044049" ,"721354939842035752", "708933957269454868" ,"708933760695009321","721347821403635713","721354939842035752", "708933957269454868"  ,"721354761441509457","709105854473044049" ,"708933852365586472","721354709562294382" ,"720993786511228928","721353316264706100",
"721374456701911170",
"722046175699796058",
"721374498758328321",
"691011674181992518",
"689311945345859795",
"727115801496125441 ",
"714446952586280992 ",
"708933957269454868",
"721373604247371797", "722080589997539368",
"708933852365586472","721373604247371797","721890235444887573","721374456701911170",
"709105854473044049","721374335146917898","722408230873202788","721374498758328321",
"708933760695009321","727152893160980480",
"725143647032705095 ","698434631636090950",
"726257532494020659 ","723526231471161445",
"727115891204030576","712203364284498041",
"725010542254620683","691011674181992518",
"725144221484580904","708146834752929813",
"459842150323060736","719862214370263120",
"726974785250263113",
"693960182803333150",
"689311945345859795",
"727115801496125441 ",
"714446952586280992 ",
"708933957269454868",
"721373604247371797",
"721373676553109524",
"721890235444887573",
"721374335146917898", "722080589997539368",
"708933852365586472","723088743493533727",
"723088839740227614","723877595560804372",
"723087879852785684","722080589997539368",
"709105854473044049",
"708933760695009321","722417080485412955",
"708933957269454868","721373604247371797",
"721373604247371797",
"721373676553109524",
"721890235444887573",
"721374335146917898",
"721374456701911170",
"722046175699796058",
"721374498758328321",
"459842150323060736",
"691011674181992518" ,
    "721374335146917898","708933760695009321" #swagiq ,
    #pride
    "708933760695009321","708933760695009321","708933760695009321","723088743493533727",
"723087879852785684",
"723088839740227614" ,"723088743493533727",
"723088839740227614",
"723087879852785684",
"723087776488226867",
"723087669873344522",
"723087621919604797","722080589997539368",
"708933852365586472","723088743493533727",
"723088839740227614","723877595560804372",
"723087879852785684","722080589997539368",
"709105854473044049",
"708933760695009321","722417080485412955",
"708933957269454868","721373604247371797",
"721373604247371797",
"721373676553109524",
"721890235444887573",
"721374335146917898",
"721374456701911170",
"722046175699796058",
"721374498758328321",
"459842150323060736","724601176292720710",
"724601624806424676",
"724426470390497280",
"724601333952544868",
"724601425706876928",
"724581276396552282",
"724601176292720710",
"724558929677385840",
"724581276396552282",
"722705945532039199",
"722706935580983386",
"711965357975535657",
"708674145340227634",
"708933957269454868",
"691011674181992518",
"722417157811601516", "709105854473044049" , "708939482405273650", "708939395323133972", "708933852365586472", "713398517544255599" ,"709683027009339424","714065739954520084",	"595639586726740049"	,"591068955523809328"	,"580198028950896640","459842150323060736","513818250652680213" ,"569420198717816852","568617830258442255",
    "718825437710516304", "718040375230595113","708146834752929813","713349059259400243","459842150323060736","716868759490527314","691011674181992518","693960182803333150","689311945345859795","695776240199794739","695775976327610498","714446952586280992","698434631636090950","717932695744937984","717924977692901436","718193072923476018","716868750376435724","718289931767775253","710823260773810286","709105854473044049","705421948171190343","707120277196242995","459842150323060736","516800236941869076","718681472936181792","700663849875144816","700663991671717939","700664433793302578","700664863525175346","700664827323875398", "694528602586480722", "694528602586480722", "694528602586480722", "681891490208677958", "693960182803333150", "693960182803333150", "693960182803333150", "568617830258442255", "568617830258442255", "570794448808837131", "570794448808837131", "689311945345859795", "689311945345859795", "689311945345859795", "694084730022264852", "694084730022264852", "686419613898113092", "686419613898113092","714063807722422333","708933852365586472","711043327960678453","708933957269454868","712373748287930388","708939482405273650","713398517544255599","720993786511228928","721353316264706100" ,"708933852365586472","721354709562294382" ,"721347821403635713","721354761441509457","709105854473044049" ,"721354939842035752", "708933957269454868" ,"708933760695009321","721347821403635713","721354939842035752", "708933957269454868"  ,"721354761441509457","709105854473044049" ,"708933852365586472","721354709562294382" ,"720993786511228928","721353316264706100",
"721374456701911170",
"722046175699796058",
"721374498758328321",
"691011674181992518" ,

"721373676553109524",
"721890235444887573",
"721374335146917898", "722080589997539368",
"708933852365586472","723088743493533727",
"723088839740227614","723877595560804372",
"723087879852785684","722080589997539368",
"709105854473044049",
"708933760695009321","722417080485412955",
"708933957269454868","721373604247371797",
"721373604247371797",
"721373676553109524",
"721890235444887573",
"721374335146917898",
"721374456701911170","709105854473044049",
"722046175699796058",
"721374498758328321",
"459842150323060736",
"691011674181992518" ,
    "721374335146917898","708933760695009321" #swagiq ,
    #pride
    "708933760695009321","708933760695009321","708933760695009321","723088743493533727",
"723087879852785684",
"723088839740227614" ,"723088743493533727",
"723088839740227614",
"723087879852785684",
"723087776488226867",
"723087669873344522",
"723087621919604797","722080589997539368",
"708933852365586472","723088743493533727",
"723088839740227614","723877595560804372",
"723087879852785684","722080589997539368",
"709105854473044049",
"708933760695009321","722417080485412955",
"708933957269454868","721373604247371797",
"721373604247371797",
"721373676553109524",
"721890235444887573",
"721374335146917898",
"721374456701911170",
"722046175699796058",
"721374498758328321",
"459842150323060736","724601176292720710",
"724601624806424676",
"724426470390497280",
"724601333952544868",
"724601425706876928",
"724581276396552282",
"724601176292720710",
"724558929677385840",
"724581276396552282",
"722705945532039199",
"722706935580983386",
"711965357975535657",
"708674145340227634",
"708933957269454868",
"691011674181992518",
"722417157811601516", "709105854473044049" , "708939482405273650", "708939395323133972", "708933852365586472", "713398517544255599" ,"709683027009339424","714065739954520084",	"595639586726740049"	,"591068955523809328"	,"580198028950896640","459842150323060736","513818250652680213" ,"569420198717816852","568617830258442255",
    "718825437710516304", "718040375230595113","708146834752929813","713349059259400243","459842150323060736","716868759490527314","691011674181992518","693960182803333150","689311945345859795","695776240199794739","695775976327610498","714446952586280992","698434631636090950","717932695744937984","717924977692901436","718193072923476018","716868750376435724","718289931767775253","710823260773810286","709105854473044049","705421948171190343","707120277196242995","459842150323060736","516800236941869076","718681472936181792","700663849875144816","700663991671717939","700664433793302578","700664863525175346","700664827323875398", "694528602586480722", "694528602586480722", "694528602586480722", "681891490208677958", "693960182803333150", "693960182803333150", "693960182803333150", "568617830258442255", "568617830258442255", "570794448808837131", "570794448808837131", "689311945345859795", "689311945345859795", "689311945345859795", "694084730022264852", "694084730022264852", "686419613898113092", "686419613898113092","714063807722422333","708933852365586472","711043327960678453","708933957269454868","712373748287930388","708939482405273650","713398517544255599","720993786511228928","721353316264706100" ,"708933852365586472","721354709562294382" ,"721347821403635713","721354761441509457","709105854473044049" ,"721354939842035752", "708933957269454868" ,"708933760695009321","721347821403635713","721354939842035752", "708933957269454868"  ,"721354761441509457","709105854473044049" ,"708933852365586472","721354709562294382" ,"720993786511228928","721353316264706100",
"721374456701911170",
"722046175699796058",
"721374498758328321",
"691011674181992518" ,
"693960182803333150","620472229846712371","694093289317597265","695994325938733138","694353173409824813","568617830258442255","693960182803333150","568617830258442255","694137428214022204","709231606430171196"

]


answer_pattern = re.compile(r'(e|Erased|not|n)?([1-3]{1})(\?)?(cnf)?(\?)?$', re.IGNORECASE)
print(answer_pattern)
apgscore = 2460
nomarkscore = 1830
markscore = 1790

async def update_scores(content, answer_scores):
    global answer_pattern

    m = answer_pattern.match(content)
    if m is None:
        return False

    ind = int(m[2])-1

    if m[1] is None:
        if m[3] is None:
            if m[4] is None:
                answer_scores[ind] -= nomarkscore
            else: # apg
                if m[5] is None:
                    answer_scores[ind] -= apgscore
                else:
                    answer_scores[ind] -= markscore

        else: # 1? ...
            answer_scores[ind] -= markscore

    else: # contains not or n
        if m[3] is None:
            answer_scores[ind] += nomarkscore
        else:
            answer_scores[ind] += markscore

    return True

class SelfBot(discord.Client):

    def __init__(self, update_event, answer_scores):
        super().__init__()
        global oot_channel_id_list
        self.oot_channel_id_list = oot_channel_id_list
        self.update_event = update_event
        self.answer_scores = answer_scores

    async def on_ready(self):
        print("======================")
        print("Nelson Trivia Self Bot")
        print("Connected to discord.")
        print("User: " + self.user.name)
        print("ID: " + str(self.user.id))

    # @bot.event
    # async def on_message(message):
    #    if message.content.startswith('-debug'):
    #         await message.channel.send('d')

        def is_scores_updated(message):
            if message.guild == None or \
                str(message.channel.id) not in self.oot_channel_id_list:
                return False

            content = message.content.replace(' ', '').replace("'", "")
            m = answer_pattern.match(content)
            if m is None:
                return False

            ind = int(m[2])-1

            if m[1] is None:
                if m[3] is None:
                    if m[4] is None:
                        self.answer_scores[ind] -= nomarkscore
                    else: # apg
                        if m[5] is None:
                            self.answer_scores[ind] -= apgscore
                        else:
                            self.answer_scores[ind] -= markscore

                else: # 1? ...
                    self.answer_scores[ind] -= markscore

            else: # contains not or n
                if m[3] is None:
                    self.answer_scores[ind] += nomarkscore
                else:
                    self.answer_scores[ind] += markscore

            return True

        while True:
            await self.wait_for('message', check=is_scores_updated)
            self.update_event.set()

class Bot(discord.Client):

    def __init__(self, answer_scores):
        super().__init__()
        self.bot_channel_id_list = []
        self.embed_msg = None
        self.embed_channel_id = None
        self.answer_scores = answer_scores

        # embed creation
        self.embed=discord.Embed(title="Trivia Plus", description="**Answer Choice**",color=0x98FB98)
        self.embed.set_author(name ='',url=' ',icon_url='')
        self.embed.add_field(name="Option I", value="0", inline=False)
        self.embed.add_field(name="Option II", value="0", inline=False)
        self.embed.add_field(name="Option III", value="0", inline=False)
        self.embed.add_field(name="Option III", value="0", inline=False)
        self.embed.set_thumbnail(url="https://cdn.discordapp.com/attachments/583982556349857812/595644489301753907/JPEG_20190702_210236.jpg")
        self.embed.set_footer(text=f"HIDDEN", \
            icon_url="https://cdn.discordapp.com/attachments/583982556349857812/595644489301753907/JPEG_20190702_210236.jpg")
        # await bot.add_reaction(message = "self.embed",emoji = ":wink")
        # await self.bot.add_reaction(embed,':spy:')


    async def clear_results(self):
        for i in range(len(self.answer_scores)):
            self.answer_scores[i]=0

    async def update_embeds(self):

         

        one_check = ""
        two_check = ""
        three_check = ""
        bold1=""
        bold2=""
        bold3=""
        line1=""
        line2=""
        line3=""
        

        lst_scores = list(self.answer_scores)

        highest = max(lst_scores)
#         lowest = min(lst_scores)
        answer = lst_scores.index(highest)+1
        best_answer="Erasing:- <a:emoji_16:711647563446616155>"
        if highest >0:
          if answer ==1:
            one_check="**"
            best_answer="Option : :one: = <:emoji_49:715300002125316177>"
          if answer==1:
            bold1=""
          else:
            bold1=":x:"
          if answer ==2:
            two_check="**"
            best_answer="Option : :two: = <:emoji_49:715300002125316177>"
          if answer ==2:
            bold2=""
          else:
            bold2=":x:"
          
          if answer ==3:
            three_check="**"
            best_answer="Option : :three: = <:emoji_49:715300002125316177>"
          if answer ==3:
            bold3=""
          else:
            bold3=":x:"
           
            
        self.embed=discord.Embed(title="HIDDEN", description=f"**__Erased__**\n{best_answer}\n",color=0xDB7093)
        self.embed.set_thumbnail(url="https://cdn.discordapp.com/attachments/707808207103590452/713131749437210694/586031853203357718.png")
        self.embed.set_footer(text=f"HIDDEN",icon_url="https://cdn.discordapp.com/attachments/707808207103590452/711655929564627025/images_28.jpeg")

        if self.embed_msg is not None:
           # await self.embed_msg.edit(embed=self.embed)

    async def on_ready(self):
        print("==============")
        print("Nelson Trivia")
        print("Connected to discord.")
        print("User: " + self.user.name)
        print("ID: " + str(self.user.id))

        await self.clear_results()
        await self.update_embeds()

        await asyncio.sleep(5)
        await self.change_presence(activity=discord.Activity(type=2,name="HQ Eraser"))
        await asyncio.sleep(5)

    async def on_message(self, message):

        # if message is private
        if message.author == self.user or message.guild == None:
            return

        if message.content.lower() == "ht":
            await message.delete()
            #if BOT_OWNER_ROLE in [role.name for role in message.author.roles]:
            self.embed_msg = None
            await self.clear_results()
            await self.update_embeds()
            self.embed_msg = \
                await message.channel.send('',embed=self.embed)
            #await self.embed_msg.add_reaction("<a:rr1:666698010150830084>")
                # await self.embed_msg.add_reaction(":white_check_mark:")
            #await self.embed_msg.add_reaction("<:Loco:649609050069270529>")
            #await self.embed_msg.add_reaction("<a:r13:666821455257927691>")
        
            self.embed_channel_id = message.channel.id
            #else:
               # await message.channel.send("**Lol** You Not Have permission To Use This **cmd!** :stuck_out_tongue_winking_eye:")
            #return

        # process votes
        if message.channel.id == self.embed_channel_id:
            content = message.content.replace(' ', '').replace("'", "")
            updated = await update_scores(content, self.answer_scores)
            if updated:
                await self.update_embeds()

def bot_with_cyclic_update_process(update_event, answer_scores):

    def cyclic_update(bot, update_event):
        f = asyncio.run_coroutine_threadsafe(bot.update_embeds(), bot.loop)
        while True:
            update_event.wait()
            update_event.clear()
            f.cancel()
            f = asyncio.run_coroutine_threadsafe(bot.update_embeds(), bot.loop)
            #res = f.result()

    bot = Bot(answer_scores)

    upd_thread = threading.Thread(target=cyclic_update, args=(bot, update_event))
    upd_thread.start()

    loop = asyncio.get_event_loop()
    loop.create_task(bot.start('NzMxMzkwNjUzMzg0MjI4OTA0.XwlgUQ.rD4clXkvA7rKWxkH_HDyXjAM9b4'))
    loop.run_forever()


def selfbot_process(update_event, answer_scores):

    selfbot = SelfBot(update_event, answer_scores)

    loop = asyncio.get_event_loop()
    loop.create_task(selfbot.start('NzA1MDUwMDI4NDQzNTY2MTQx.XsdGLw.hkpeHpiJBYl2lUdukGlT2iXu1O0',
                                   bot=False))
    loop.run_forever()

if __name__ == '__main__':

    # running bot and selfbot in separate OS processes

    # shared event for embed update
    update_event = multiprocessing.Event()

    # shared array with answer results
    answer_scores = multiprocessing.Array(typecode_or_type='i', size_or_initializer=3)

    p_bot = multiprocessing.Process(target=bot_with_cyclic_update_process, args=(update_event, answer_scores))
    p_selfbot = multiprocessing.Process(target=selfbot_process, args=(update_event, answer_scores))

    p_bot.start()
    p_selfbot.start()

    p_bot.join()
    p_selfbot.join()
